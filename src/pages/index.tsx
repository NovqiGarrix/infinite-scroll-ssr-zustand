import type { NextPage, GetServerSideProps } from "next";

import Head from "next/head";
import Link from "next/link";
import InfiniteScroll from "react-infinite-scroll-component";

import { useMovies } from "../hooks/useMovies";
import getNextMovies from "../apis/getNextMovies";
import CardComponent from "../components/CardComponent";

const Home: NextPage = () => {
  const info = useMovies().info;
  const setInfo = useMovies().setInfo;

  const movies = useMovies().movies;
  const setMovies = useMovies().setMovies;

  const getMoreData = async () => {
    if (!info.nextURL) return;

    try {
      const newMovies = await getNextMovies(info.nextURL);
      if (!newMovies) return;

      setMovies(newMovies.data);
      setInfo(newMovies.info);
    } catch (error: any) {
      console.error(error.message, "getMoreData of MoviesComponent");
    }
  };

  return (
    <div className="px-5 py-5 bg-slate-900">
      <Head>
        <title>Home Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Link href="/hello" className="text-gray-100 text-xl">
        Go to other page
      </Link>

      <div className="flex items-center justify-between font-poppins">
        <InfiniteScroll
          dataLength={movies.length * info.allPage}
          hasMore={Boolean(info.nextURL)}
          next={getMoreData}
          loader={<></>}
          style={{
            display: "flex",
            flexDirection: "column-reverse",
            overflow: "hidden",
          }}
        >
          <div className="grid h-full grid-cols-2 md:grid-cols-6 items-center gap-2 md:gap-5 mt-5">
            {movies.map((movie) => (
              <CardComponent
                key={movie.slug}
                imageURL={movie.poster}
                cardLabel={movie.title}
                rating={movie.rating}
              />
            ))}
          </div>
        </InfiniteScroll>
      </div>
    </div>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async () => {
  const resp = await fetch(
    `${process.env.API_URL}/movies?based=newest&limit=12`,
    {
      headers: {
        "Content-Type": "application/json",
      },
    }
  );

  const { data, error, info } = await resp.json();

  return {
    props: {
      movies: data,
      error,
      info,
    },
  };
};
